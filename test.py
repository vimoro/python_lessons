# LESSON 2
#######################################################################################################################
# 1 - done - l
# Пусть у нас есть массив чисел numbers = [3, 5, 2, 6, 8].
# Нужно вывести сумму первого и последнего элементов массива.

# 2 - done - l
# Пусть у нас есть массив слов pets = ["cat", "dog", "fish", "hamster", "parrot"].
# Нужно вывести в консоль второе и четвертое слово через запятую.

# 3 - done - hw
# Пусть у нас есть массив слов food = ['котлета', 'пюрешка', 'драники', 'пицца', 'мороженное'].
# Вывести на консоль два блюда, которые больше всего нравятся, в формате:
# 'Из предложенного я больше люблю <блюдо1> и <блюдо2>'

# 4 - done - hw
# Пусть у нас есть три переменные:
# a = 1
# b = 2
# c = 3
# Нужно, используя распаковку кортежа, поменять местами a и b, а потом b и c.

# 5 - done - hw
# Пусть у нас есть словарь, где ключ это страна, а значение - столица:
# countries_capitals = {
#     'Belarus': 'Minsk',
#     'Poland': 'Warsaw',
#     'Great Britain': 'London',
# }
# Нужно вывести на экран, используя словарь, столицу Польши

# 6 - done - hw
# Пусть в программе хранится список друзей:
# friends = ['Egor', 'Liza', 'Vanya', 'Yana']
# При запуске программа просит ввести имя, и проверяет, есть ли оно в списке.
# Если есть, вывести сообщение 'У меня есть друг <имя>',
# если нет, вывести 'У меня нет друга с именем <имя>'.

# 7 - done - lesson
# У нас есть словарь, где ключ это имя, а значение - номер телефона:
# friends_phone_numbers = {
#     'Egor': 123,
#     'Liza': 555,
#     'Vanya': 908,
#     'Yana': 150,
# }
# При запуске программа просит ввести имя, и если оно есть в словаре,
# выводит номер телефона, если нет - '<имя> не в моей телефонной книге'.

# 8  - done - lesson
# Есть массив чисел numbers = [5, 1, 2, 7, 4, 3, 8, 1, 10]. Нужно поменять местами первый и последний элементы.
# (двумя способами указать последний элемент).

# 9
# Пользователь вводит строку. Нужно вывести в консоль длину последнего слова в строке.
# Примеры:
# "Hello World" -> 5
# "   fly me   to   the moon  " -> 4

# LESSON 3 - 4
#######################################################################################################################

# 1 (на if else) - done - hw
# Пользователь вводит две строки. Нужно вывести True, если в обеих строках использовались одинаковые символы,
# и False иначе.
# Примеры работы:
# "abc" и "bca" -> True
# "aabc" и "abc" -> True
# "Abc" и "abc" -> False
# "abc" и "aaa" -> False

# 2 (на if else) - done - lesson
# Напишите программу, которая запрашивает у пользователя два числа (x и y) и выводит на экран результат их сравнения.
#
# Если x больше y, то программа должна вывести сообщение "x больше y".
# Если x меньше y, то программа должна вывести сообщение "x меньше y".
# Если x равно y, то программа должна вывести сообщение "x равно y".
# Однако, если x и y кратны 2, то программа должна вывести дополнительное сообщение "Оба числа кратны 2".

# 3 - done - lesson
# Дан список numbers = [5, 1, 2, 7, 4, 3, 8, 1, 10]
# Заменить каждый второй элемент на 0. Сделать двумя способами

# 4 - done - lesson
# Дан список numbers = [5, 1, 2, 7, 4, 3, 8, 1, 10]
# Посчитать сумму элементов списка, не использую встроенную функцию sum

# 5 - done - lesson
# Дан словарь:
# friends_phone_numbers = {
#     'Egor': 123,
#     'Liza': 555,
#     'Vanya': 908,
#     'Yana': 150,
# }
# Для каждого элемента словаря вывести на экран: "У друга <имя> номер телефона <номер>"

# 6 (на if и на циклы) - done - lesson
# Пользователь вводит число. Проверить, если пользователь ввел какие-либо символы
# кроме цифр, вывести сообщение 'Вы ввели невалидное число", иначе вывести на экран сумму цифр числа.
# Сделать двумя способами (с циклом и без)

# 7 (на if и на циклы) - done - lesson
# Пользователь вводит строку. Нужно посчитать сколько раз встречается каждый из символов строки

# 5 (на if и на циклы)
# Пусть есть отсортированный список целых чисел и число-цель. Нужно найти такие два элемента списка,
# сумма которых равна числу-цели, вывести индексы этих элементов.
# Дважды один и тот же элемент использовать нельзя


# LESSON 5
#######################################################################################################################

# 1 (на рекурсию)
# Написать функцию вычисляющую числа Фибоначчи от 0 до параметра n.
# Функция возвращает list с числами.
# n задается пользователем через input и затем передаётся в функцию, результат печатается в терминал

# 2 (функция + if/else)
# Написать функцию которая печатает числа от 0 до n, n - параметр.
# Если число делится на 3, вместо числа печатает fizz, если число делится на 5, вместо числа печатает buzz.
# Если число делится и на 3 и на 5, вместо числа печатает fizzbuzz

# 3
# Дан список чисел. Написать функцию, которая вернет сумму только положительных элементов списка

# 4
# Дан список строк. Написать функцию, которая вернет строку, которая получается путем склеивания
# каждой второй строки списка (склеивать через пробел)

# 5
# Дан список чисел. Написать функцию, которая вернет минимальное значение из списка.
# (Конкретно в этой задаче встроенную функцию min не использовать)

# 6
# Дано целое число. Написать функцию, которая вернет произведение его цифр.

# 7
# Написать функцию, которая проверяет является ли целое число четным.
# Функция возвращает True, если число четное, False если нет.
# Если пользователь ввел не число, вывести ошибку, что введенные данные не являются числом.
# Ввод и вывод результата производится вне функции проверки

# 8
# Написать функцию, которая принимает число n и выводит числа от 0 до n.
# Если число является четным, вывести квадрат числа, вместо числа.
# Для проверки на четность использовать функцию из задания 1.
# Если число делится на 7 и на 4 одновременно, процесс останавливается.
# Если пользователь ввел не число, вывести ошибку, что введенные данные не являются числом.

# 9
# Написать функцию, подсчитывающую сколько раз пользователь ввел каждую строку.
# Пользователь вводить одну строку за раз.
# Каждый раз счетчик ввода этой строки увеличивается на 1.
# Если пользователь ввел строку "exit", программа завершается и выводит статистику введенных строк.
# Счетчики хранить в dict
# Пример:
# type string: abracadabra
# type string: test
# type string: test
# type string: test2
# type string: exit
# collecting stats
# stats: {"abrakadabra": 1, "test": 2, "test2": 1}

# 10
# Создать функцию SumRange (start, end), которая будет суммировать все целые числа от start до end.
# Дополнительно обработать следующий случай:
# Если пользователь задаст значение start больше, чем end, то они будут меняться местами.

############ LESSON 8 #############
# 1
# Документ «article.txt» содержит следующий текст:
# Вечерело
# Жужжали мухи
# Светил фонарик
# Кипела вода в чайнике
# Венера зажглась на небе
# Деревья шумели
# Тучи разошлись
# Листва зеленела
#
# Требуется реализовать функцию longest_words(file),
# которая выводит слово, имеющее максимальную длину.

# 2
# Напишите функцию read_last(lines, file), которая будет открывать определенный файл file
# и выводить на печать построчно последние строки в количестве lines
# (на всякий случай проверим, что задано положительное целое число).
# Протестируем функцию на файле «article.txt» со следующим содержимым:
#
# Вечерело
# Жужжали мухи
# Светил фонарик
# Кипела вода в чайнике
# Венера зажглась на небе
# Деревья шумели
# Тучи разошлись
# Листва зеленела

# 3
# Дан файл сл следующим текстом:
# here is the house that Jack built and this is the wheat that is in the dark closet
# stored in the house that Jack built and this is a cheerful tit bird
# who often steals wheat that is stored in a dark closet
# in the house that Jack built
#
# Нужно для каждого слова, встретившегося в тексте, посчитать, сколько раз оно встретилось
# и записать результат в JSON файл в формате {<слово>: <сколько раз встретилось>, ...}:
# {
#     "here": 1,
#     "is": 5,
#     "the": 5,
#      ...
# }



def twoSum(self, nums, target):
    for i, num in enumerate(nums[:-1]):
        for j, next_num in enumerate(nums[i + 1:], i + 1):
            if num + next_num == target:
                return [i, j]


def twoSum(self, nums, target):
    previous = {}
    for i, num in enumerate(nums):
        if target - num in previous:
            return [previous[target - num], i]
        previous[num] = i


def twoSum(nums, target: int):
    # nums.sort()
    i = 0
    j = len(nums) - 1
    while i < j:
        summ = nums[i] + nums[j]
        if summ == target:
            return [i, j]
        if summ > target:
            j -= 1
        else:
            i += 1
